<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Google在线深度学习神器colab把玩</title>
    <url>/2020/08/10/google-zai-xian-shen-du-xue-xi-shen-qi-colab-ba-wan/</url>
    <content><![CDATA[<h2 id="Colaboratory入门玩"><a href="#Colaboratory入门玩" class="headerlink" title="Colaboratory入门玩"></a>Colaboratory入门玩</h2><div class="note success">
            <p><a href="https://colab.research.google.com/" target="_blank" rel="noopener">官网</a></p>
          </div>

<div class="note default">
            <p><span style="color:green">打开官网，跟着指引来一遍</span></p>
          </div>
<ul>
<li>基于Jupyter Notebook，托管于Google，使用起来大同小异，熟悉Jupyter的话，也是很方便的。</li>
<li>代码和注释并存</li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810101129196.png" alt="image-20200810101129196"></li>
<li>直接可视化显示</li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810101210851.png" alt="image-20200810101210851"></li>
<li>其他很多特性，比如还能再cell处评论，很方便</li>
<li>可以本地导入项目，也能Google Drive对接存储。</li>
</ul>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810101415115.png" alt="image-20200810101415115"></p>
<div class="note default">
            <p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810101513478.png" alt="image-20200810101513478"></p><span style="color:green"><p>配置不错，对于深度学习机器学习提供了很大帮助。</p><p>其他更多在<a href="https://colab.research.google.com/notebooks/intro.ipynb" target="_blank" rel="noopener">官方教程</a><br></span></p>
          </div>

<h2 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h2><blockquote>
<p>尽管来说，Jupyter很方便，但是对于某些不可描述操作，还是终端内好用。所以就想办法通过ssh连接到它后端。利用到了ngrok来内网穿透。</p>
<p>脚本找了两个版本，用其中任意一个都可以。</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810102213746.png" alt="image-20200810102213746"></p>
<h3 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h3><p> Sign up for <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a></p>
<blockquote>
<ul>
<li><p>You don’t need to buy paid plans. If you don’t want to sign up for anything, there is <a href="https://serveo.net/" target="_blank" rel="noopener">Serveo</a> version in following link. But it is slower than <a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a> version.</p>
<p><a href="https://github.com/demotomohiro/Google-Colaboratory-SSH-samples/blob/master/src/ssh_serveo.ipynb" target="_blank" rel="noopener">https://github.com/demotomohiro/Google-Colaboratory-SSH-samples/blob/master/src/ssh_serveo.ipynb</a></p>
<p>注册ngrok，转到token页面，为后边准备。</p>
<p><a href="https://dashboard.ngrok.com/auth/your-authtoken" target="_blank" rel="noopener">Get Your Auth Ngrok Token</a></p>
</li>
</ul>
</blockquote>
<h3 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h3><ol>
<li><p>复制代码到Colab任意创建一个新cell中</p>
<ul>
<li><p>ssh only</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">!pip install git+https://github.com/demotomohiro/remocolab.git</span><br><span class="line">import remocolab</span><br><span class="line">remocolab.setupSSHD()</span><br></pre></td></tr></table></figure></li>
<li><p>ssh and vnc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">!pip install git+https://github.com/demotomohiro/remocolab.git</span><br><span class="line">   import remocolab</span><br><span class="line">   remocolab.setupVNC()</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>点左侧运行</p>
<ul>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810103313123.png" alt="image-20200810103313123"></li>
</ul>
</li>
<li><p>把上边复制的authtoken粘到输入框</p>
<ul>
<li>等待上边代码部署到输入框时候，粘贴token，回车</li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810103458678.png" alt="image-20200810103458678"></li>
<li>然后选区域，选最近差不多，我选新加坡<img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810103619187.png" alt="image-20200810103619187"></li>
</ul>
</li>
<li><p>愉快登录ssh</p>
<ul>
<li>等待部署完成后，会显示用户名和密码，以及ssh登录命令，有手就行。</li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810103851755.png" alt="image-20200810103851755"></li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810102213746.png" alt="image-20200810102213746"></li>
</ul>
</li>
</ol>
<h3 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h3><p>步骤类似，粘贴脚本就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Install useful stuff</span></span><br><span class="line">! apt install --yes ssh screen nano htop ranger git &gt; /dev/null</span><br><span class="line"><span class="comment"># SSH setting</span></span><br><span class="line">! <span class="built_in">echo</span> <span class="string">"root:carbonara"</span> | chpasswd</span><br><span class="line">! <span class="built_in">echo</span> <span class="string">"PasswordAuthentication yes"</span> &gt; /etc/ssh/sshd_config</span><br><span class="line">! <span class="built_in">echo</span> <span class="string">"PermitUserEnvironment yes"</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">! <span class="built_in">echo</span> <span class="string">"PermitRootLogin yes"</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line">! service ssh restart &gt; /dev/null</span><br><span class="line"><span class="comment"># Download ngrok</span></span><br><span class="line">! wget -q -c -nc https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip</span><br><span class="line">! unzip -qq -n ngrok-stable-linux-amd64.zip</span><br><span class="line"><span class="comment"># Run ngrok</span></span><br><span class="line">authtoken = <span class="string">"PUT_YOUR_TOKEN_HERE"</span></span><br><span class="line">get_ipython().system_raw(<span class="string">'./ngrok authtoken $authtoken &amp;&amp; ./ngrok tcp 22 &amp;'</span>)</span><br><span class="line">! sleep 3</span><br><span class="line"><span class="comment"># Get the address for SSH</span></span><br><span class="line">import requests</span><br><span class="line">from re import sub</span><br><span class="line">r = requests.get(<span class="string">'http://localhost:4040/api/tunnels'</span>)</span><br><span class="line">str_ssh = r.json()[<span class="string">'tunnels'</span>][0][<span class="string">'public_url'</span>]</span><br><span class="line">str_ssh = sub(<span class="string">"tcp://"</span>, <span class="string">""</span>, str_ssh)</span><br><span class="line">str_ssh = sub(<span class="string">":"</span>, <span class="string">" -p "</span>, str_ssh)</span><br><span class="line">str_ssh = <span class="string">"ssh root@"</span> + str_ssh</span><br><span class="line"><span class="built_in">print</span>(str_ssh)</span><br></pre></td></tr></table></figure>

<div class="note success">
            <span style="color:green">只需要把上边`authtoken`换成自己的，运行！</span>
          </div>

<ul>
<li>等待部署完成，ssh登录命令</li>
</ul>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810104336106.png" alt="image-20200810104336106"></p>
<blockquote>
<p>默认密码为<code>carbonara</code></p>
<p>及时更改密码</p>
</blockquote>
<h2 id="配置vscode"><a href="#配置vscode" class="headerlink" title="配置vscode"></a>配置vscode</h2><blockquote>
<p>既然ssh连接了，各种服务也都能搭建了，这里搭建个vscode方便敲代码</p>
</blockquote>
<ol>
<li>挂载Google Drive</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Mount Google Drive and make some folders for vscode</span></span><br><span class="line">from google.colab import drive</span><br><span class="line">drive.mount(<span class="string">'/googledrive'</span>)</span><br><span class="line">! mkdir -p /googledrive/My\ Drive/colabdrive</span><br><span class="line">! mkdir -p /googledrive/My\ Drive/colabdrive/root/.<span class="built_in">local</span>/share/code-server</span><br><span class="line">! ln -s /googledrive/My\ Drive/colabdrive /</span><br><span class="line">! ln -s /googledrive/My\ Drive/colabdrive/root/.<span class="built_in">local</span>/share/code-server /root/.<span class="built_in">local</span>/share/</span><br></pre></td></tr></table></figure>

<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810104745488.png" alt="image-20200810104745488"></p>
<p>点击链接验证授权</p>
<ol start="2">
<li>下载部署<code>code-server</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">! curl -fsSL https://code-server.dev/install.sh | sh &gt; /dev/null</span><br><span class="line">! code-server --<span class="built_in">bind</span>-addr 127.0.0.1:9999 --auth none &amp;</span><br></pre></td></tr></table></figure>

<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810104901196.png" alt="image-20200810104901196"></p>
<ol start="3">
<li>本地shell运行命令映射</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -L 9999:localhost:9999 root@0.tcp.ngrok.io -p 14407</span><br></pre></td></tr></table></figure>

<p>其中9999端口为上边指定code-server端口，可以更换，但必须一致。</p>
<p>后边14407端口为ssh端口</p>
<ol start="4">
<li>愉快敲代码</li>
</ol>
<ul>
<li>打开<code>http://127.0.0.1:9999</code></li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810105129368.png" alt="image-20200810105129368"></li>
</ul>
<h2 id="其他玩法"><a href="#其他玩法" class="headerlink" title="其他玩法"></a>其他玩法</h2><ul>
<li>Aria2 离线下载</li>
<li>Youtube-dl 转存</li>
<li>Rclone</li>
<li>gd-utils</li>
<li>etc…</li>
</ul>
<blockquote>
<p>更多自己探索发现</p>
</blockquote>
<h2 id="Related"><a href="#Related" class="headerlink" title="Related"></a>Related</h2><ul>
<li><a href="https://internet-of-tomohiro.netlify.app/google_colab/ssh.en.html" target="_blank" rel="noopener">How to access Google Colaboratory using ssh</a></li>
<li><a href="https://towardsdatascience.com/colab-free-gpu-ssh-visual-studio-code-server-36fe1d3c5243" target="_blank" rel="noopener">Colab on steroids: free GPU instances with SSH access and Visual Studio Code Server</a></li>
<li><a href="https://colab.research.google.com/notebooks/intro.ipynb" target="_blank" rel="noopener">Colab Intro</a></li>
<li><a href="https://dashboard.ngrok.com/auth/your-authtoken" target="_blank" rel="noopener">Get Your Auth Ngrok Token</a></li>
<li><a href="https://www.google.com/" target="_blank" rel="noopener">Google</a></li>
</ul>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810100453017.png" alt="image-20200810100453017"></p>
<hr>
<hr>
<blockquote>
<p>Colab方便，但不要滥用。</p>
<p>免费版本一般12h，但更多取决于GPU使用度</p>
<p>学习，学习，学习！</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200810105410318.png" alt="image-20200810105410318"></p>
</blockquote>
]]></content>
      <categories>
        <category>玩玩</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Colaboratoty</tag>
        <tag>机器学习</tag>
        <tag>VScode</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Archive Program,我的祖传代码</title>
    <url>/2020/07/18/github-archive-program-wo-de-zu-chuan-dai-ma/</url>
    <content><![CDATA[<h2 id="GitHub-Archive-Program"><a href="#GitHub-Archive-Program" class="headerlink" title="GitHub Archive Program"></a>GitHub Archive Program</h2><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200718173124.png" alt="GitHub Archive Program"></p>
<p>只要2020年2月2日以前贡献过的开源代码，现在都已经被埋在北极的冰雪之下，保存一千年。</p>
<blockquote>
<p><a href="https://archiveprogram.github.com/" target="_blank" rel="noopener">GitHub Archive Program</a></p>
</blockquote>
<h2 id="个人勋章"><a href="#个人勋章" class="headerlink" title="个人勋章"></a>个人勋章</h2><p>GitHub还颁发了勋章</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200718173702.png" alt="勋章"></p>
<p>nice~</p>
<p>不论代码写的怎样,余下的BUG啥的留给1000年后的去探索吧~</p>
<hr>
]]></content>
      <categories>
        <category>日常杂记</category>
        <category>随手记</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>祖传代码</tag>
      </tags>
  </entry>
  <entry>
    <title>Calibre+rclone+google drive搭建个人书库记录</title>
    <url>/2020/08/02/calibre-rclone-google-drive-da-jian-shu-ku-ba-wan/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>记录了一些折腾过程</p>
</blockquote>
<details>
    <summary>一些缘由</summary>

<h3 id="E5"><a href="#E5" class="headerlink" title="E5"></a>E5</h3><ol>
<li><p>前一段微软开发者E5订阅很火热，也顺手申请了一个，主要还是看上<code>OneDrive</code>的存储，E5可以拥有25个子账号，所以空间至少<code>25x5T</code>，当然也用不了这么多。</p>
</li>
<li><p>由于E5可能是参照开发者使用情况续订的，所以同时也部署了<a href="https://github.com/GentlemanHu/OwnE5" target="_blank" rel="noopener"><code>自动调用API续订</code></a>程序来尝试维持续订。</p>
</li>
</ol>
<ol start="3">
<li>搭建了各种索引程序作为个人网盘，总之，尝试了多款，各有优势吧。</li>
</ol>
<h3 id="TeamDrive"><a href="#TeamDrive" class="headerlink" title="TeamDrive"></a>TeamDrive</h3><ol>
<li><p>GoogleDrive订阅G Suit教育版或者商业版是无限容量的（$$$)，教育邮箱之前搞过一个，翻车了。</p>
</li>
<li><p>偶然发现还有TeamDrive也是无限容量，就也顺手搞了一个玩玩看。</p>
</li>
<li><p>又发现各种玩法，转存什么的，利用SA账号转存，TG机器人转存等，顺手也搭建了。</p>
<blockquote>
<p><a href="https://github.com/iwestlin/gd-utils" target="_blank" rel="noopener">gd-utils</a></p>
</blockquote>
</li>
</ol>
<h3 id="个人演示站"><a href="#个人演示站" class="headerlink" title="个人演示站"></a>个人演示站</h3><ul>
<li>OD（暂不）</li>
<li>GD<ul>
<li><a href="https://pie.holyfuck.ml" target="_blank" rel="noopener">https://pie.holyfuck.ml</a></li>
<li><a href="https://pie.keepfuture.live" target="_blank" rel="noopener">https://pie.keepfuture.live</a></li>
</ul>
</li>
</ul>
<h3 id="折腾开始"><a href="#折腾开始" class="headerlink" title="折腾开始"></a>折腾开始</h3><ul>
<li>各种离线下载，转存机器人也都玩过了，就想玩玩新鲜的。</li>
<li>于是想到了搭建个人书库，利用这些<code>强大的</code>存储作支持。</li>
<li>当然，OD和GD都是可以的，但是看到<code>calibre-web</code>这款管理面板原生支持GD，就选择了GD</li>
</ul>
</details>

<h2 id="一、Calibre-web搭建与配置"><a href="#一、Calibre-web搭建与配置" class="headerlink" title="一、Calibre-web搭建与配置"></a>一、Calibre-web搭建与配置</h2><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="py依赖部署版"><a href="#py依赖部署版" class="headerlink" title="py依赖部署版"></a>py依赖部署版</h4><p><a href="https://github.com/janeczku/calibre-web" target="_blank" rel="noopener">calibre-web</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 仓库</span><br><span class="line"><span class="built_in">cd</span> </span><br><span class="line"><span class="comment"># python3 (python3.x) </span></span><br><span class="line">pip3 install --target vendor -r requirements.txt </span><br><span class="line"><span class="comment"># (python2.7).</span></span><br><span class="line">pip install --target vendor -r requirements.txt</span><br></pre></td></tr></table></figure>

<p>执行启动命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python cps.py</span><br><span class="line">或者 </span><br><span class="line">nohup python cps.py</span><br></pre></td></tr></table></figure>

<p>至此，calibre的面板calibre-web搭建成功，接下来跟GD存储端对接。</p>
<p>面板原生支持GD</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/20200802184446.png" alt=""></p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/20200802184359.png" alt=""></p>
<p><a href="https://github.com/janeczku/calibre-web/wiki/Configuration#using-google-drive-integration" target="_blank" rel="noopener">doc</a></p>
<p>由于某些原因，采用下边rclone挂载GD方式。</p>
<h4 id="docker版"><a href="#docker版" class="headerlink" title="docker版"></a><del>docker版</del></h4><blockquote>
<p>docker安装可谓最简单，可惜各种折腾未成功，还是一般安装吧~</p>
<p>⚠️以下只是记录了报错等信息，尝试修复过程</p>
</blockquote>
<p><a href="https://hub.docker.com/r/linuxserver/calibre-web/" target="_blank" rel="noopener">calibre-docker</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker create \</span><br><span class="line">  --name=calibre-web \</span><br><span class="line">  -e PUID=1000 \</span><br><span class="line">  -e PGID=1000 \</span><br><span class="line">  -e TZ=Europe/London \</span><br><span class="line">  -e DOCKER_MODS=linuxserver/calibre-web:calibre \</span><br><span class="line">  -p 8083:8083 \</span><br><span class="line">  -v /media/config:/config \</span><br><span class="line">  -v /media/Books:/books \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  linuxserver/calibre-web</span><br></pre></td></tr></table></figure>

<ul>
<li><p>安装好之后，尽管已经映射，docker容器内不能读取到从host外部共享到内部的目录，所以，挂载的GD也就不能用。</p>
</li>
<li><p>找了一番，有个rclone-mount的docker镜像是专门为此而生。</p>
<blockquote>
<p><a href="https://github.com/tynor88/docker-rclone-mount" target="_blank" rel="noopener">rclone-mount-docker</a></p>
<p><a href="https://hub.docker.com/r/mumiehub/rclone-mount/" target="_blank" rel="noopener">Docker-rclone</a></p>
</blockquote>
</li>
<li><p><code>docker build -t rclone-docker:rclone .</code></p>
</li>
<li><p><code>docker run -t -i rclone-docker:rclone /bin/bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start rclone-mount</span><br><span class="line">Error response from daemon: oci runtime error: container_linux.go:235: starting container process caused <span class="string">"process_linux.go:339: running prestart hook 2 caused \"error running hook: exit status 1, stdout: , stderr: \""</span></span><br><span class="line">Error: failed to start containers: rclone-mount</span><br></pre></td></tr></table></figure>
</li>
<li><p>报错,google后需要在linux内核启动namespace什么的，下边是教程</p>
</li>
<li><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html-single/getting_started_with_containers/index#user_namespaces_options" target="_blank" rel="noopener">https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux_atomic_host/7/html-single/getting_started_with_containers/index#user_namespaces_options</a></p>
</li>
</ul>
<blockquote>
<p>然而需要重启，由于部署了一堆闲玩的东西，很多没部署service自启动，重启后说不定就不知道到在哪启动了，所以放弃。</p>
</blockquote>
<h3 id="后台配置"><a href="#后台配置" class="headerlink" title="后台配置"></a>后台配置</h3><blockquote>
<p>详见下边第三步</p>
</blockquote>
<h2 id="二、rclone挂载GD"><a href="#二、rclone挂载GD" class="headerlink" title="二、rclone挂载GD"></a>二、rclone挂载GD</h2><h3 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h3><h4 id="安装rclone"><a href="#安装rclone" class="headerlink" title="安装rclone"></a>安装<a href="https://rclone.org/install/#script-installation" target="_blank" rel="noopener">rclone</a></h4><h4 id="配置GD并挂载"><a href="#配置GD并挂载" class="headerlink" title="配置GD并挂载"></a>配置GD并挂载</h4><ul>
<li><p><code>rclone config</code></p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200802185121351.png" alt="image-20200802185121351"></p>
<blockquote>
<p> 新建remote</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200802185159925.png" alt="image-20200802185159925"></p>
<blockquote>
<p>选13（具体看版本），google drive</p>
<p>client_id和secret_id可以不写，默认用的官方的。</p>
<p>接下来都选1</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200802185330214.png" alt="image-20200802185330214"></p>
</li>
</ul>
<blockquote>
<p>根据提示，验证那里，由于是在vps没显示器，选n，点开链接验证后，复制代码到下边。</p>
<p>配置成TeamDrive</p>
<p>然后一路yes就行了</p>
</blockquote>
<h4 id="挂载磁盘点，配置自启动"><a href="#挂载磁盘点，配置自启动" class="headerlink" title="挂载磁盘点，配置自启动"></a>挂载磁盘点，配置自启动</h4><ul>
<li>新建挂载文件夹，我建在<code>/media/Books</code></li>
<li>配置service自启动</li>
</ul>
<p>将下边脚本改好后，新建service</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /usr/lib/systemd/system/books.service</span><br></pre></td></tr></table></figure>

<p>下边复制到新建的service中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Rclone</span><br><span class="line">After=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=/usr/bin/rclone mount Books:/ /media/Books/ --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --vfs-cache-mode writes #针对calibre读取数据库加的</span><br><span class="line">Restart=on-abort</span><br><span class="line">User=root</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=default.target</span><br></pre></td></tr></table></figure>

<blockquote>
<p>需要改两个地方，<code>Books:/</code> 和 <code>/media/Books</code>，第一个为rclone配置的名称，第二个为本地挂载点。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload;</span><br><span class="line">systemctl restart books;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看状态</span></span><br><span class="line">systemctl status books -l;</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开机自启</span></span></span><br><span class="line">systemctl enable books;</span><br></pre></td></tr></table></figure>

<p>进入挂载点，ls能看到盘内容，成功~</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200804122150879.png" alt="image-20200804122150879"></p>
<h3 id="docker版-1"><a href="#docker版-1" class="headerlink" title="docker版"></a><del>docker版</del></h3><blockquote>
<p>docker得折腾更多，就不用了</p>
<p>下边只贴上了启动参数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --name rclone-mount \</span><br><span class="line">    --restart=unless-stopped \</span><br><span class="line">    --<span class="built_in">cap</span>-add SYS_ADMIN \</span><br><span class="line">    --device /dev/fuse \</span><br><span class="line">    --security-opt apparmor:unconfined \</span><br><span class="line">    -e RemotePath=<span class="string">"Bookgo:"</span> \</span><br><span class="line">    -e MountCommands=<span class="string">"--copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --vfs-cache-mode writes"</span> \</span><br><span class="line">    -v /root/.config/rclone:/config \</span><br><span class="line">    -v /media/Books:/mnt/mediaefs:shared \</span><br><span class="line">    mumiehub/rclone-mount</span><br></pre></td></tr></table></figure>

<h2 id="三、calibre安装与书库配置"><a href="#三、calibre安装与书库配置" class="headerlink" title="三、calibre安装与书库配置"></a>三、calibre安装与书库配置</h2><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/20200802184755.png" alt=""></p>
<p>安装成功，并配置好书库后，进入web登录后就是这样的界面。</p>
<blockquote>
<p>然而，第一步中安装好的web面板，第一次登录，会让你设置书库地址，路径内必须有<code>metadata.db</code>书库的数据库文件。</p>
<p>⚠️如果第一次用的话，没有metadata.db，必须手动搞一个，或者下载<a href="https://drive.google.com/file/d/189tv5i5SNT6rivLLLvCmC2JeLtODmSS1/view?usp=sharing" target="_blank" rel="noopener">这个</a>空白的书库放在路径内。</p>
</blockquote>
<h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200804142346644.png" alt=""></p>
<ul>
<li><p>这样，输入初始admin，admin123用户登入，其他后台自行设置就行了</p>
</li>
<li><p>初始密码及时更改</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200804142454950.png" alt="image-20200804142454950"></p>
<p>功能还可以，有自动推送kindle功能。</p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200804142552774.png" alt="image-20200804142552774"></p>
</li>
<li><p>还有格式转换等，需要自行下载插件，路径配置好。</p>
</li>
</ul>
<h3 id="导入书库"><a href="#导入书库" class="headerlink" title="导入书库"></a>导入书库</h3><ul>
<li>上一步初始化后，书库只有一本Quick Start默认书</li>
<li>可以通过面板上传按钮自行上传</li>
<li>也可以通过calibre命令行导入其他一些书库</li>
</ul>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/20200802184602.png" alt=""></p>
<h4 id="创建calibre数据库"><a href="#创建calibre数据库" class="headerlink" title="创建calibre数据库"></a>创建calibre数据库</h4><blockquote>
<p>这里需要用到calibre官方程序，尽管在vps不能可视化操作，但是命令行能用，导入书籍信息，自动归类等还是很好用</p>
</blockquote>
<ul>
<li><ol>
<li>下载安装calibre<br><a href="https://calibre-ebook.com/download_linux" target="_blank" rel="noopener">download</a></li>
</ol>
<blockquote>
<p>仔细参照官方要求环境安装，如果环境不匹配，很折腾</p>
<p>python：2.7.9+（&lt;3)</p>
<p>gcc: 5.4.0+</p>
<p>具体看安装时候提示信息，不匹配会出现各种问题</p>
</blockquote>
</li>
<li><ol start="2">
<li>使用<code>calibredb</code>命令将个人书籍导入数据库</li>
</ol>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">calibredb add "/media/Books/代码相关" --add --duplicates --ignore "*.md" --recurse --library-path=/root/tmp/bookslib</span><br></pre></td></tr></table></figure>

<p>上述表示递归添加<code>media/Books/代码相关</code>目录下所有支持图书，不含<code>md</code>，并允许重复，最后规定了<code>metadata.db</code>的路径</p>
<blockquote>
<p>其他指令参照官方man<a href="https://manual.calibre-ebook.com/generated/en/calibredb.html" target="_blank" rel="noopener">手册</a></p>
</blockquote>
<h4 id="kindle推送配置"><a href="#kindle推送配置" class="headerlink" title="kindle推送配置"></a>kindle推送配置</h4><blockquote>
<p>详见后台配置</p>
</blockquote>
<h4 id="opds配置"><a href="#opds配置" class="headerlink" title="opds配置"></a>opds配置</h4><blockquote>
<p><a href="https://site/opds" target="_blank" rel="noopener">https://site/opds</a></p>
<p>站点后加<code>opds</code>就是opds地址，导入其他软件可用</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://gitee.com/gentlemanhu/public-store/raw/master//images/image-20200804105005437.png" alt="image-20200804105005437"></p>
<h3 id="愉快看书-收藏"><a href="#愉快看书-收藏" class="headerlink" title="愉快看书(收藏)"></a>愉快看书(收藏)</h3><ul>
<li><p><a href="https://taotao.521521.ml" target="_blank" rel="noopener">https://taotao.521521.ml</a>  导入了GD珍藏的几个T的书库</p>
</li>
<li><p><a href="https://book.crushing.xyz" target="_blank" rel="noopener">https://book.crushing.xyz</a>  演示，只有一本</p>
<blockquote>
<p>利用OD和GD大容量，个人图书馆，爽~</p>
<p>也许只是收藏吧~😑</p>
</blockquote>
</li>
</ul>
<hr>
<blockquote>
<p>更多配置细节还得看个人需求</p>
<p>记录探索，探索记录</p>
</blockquote>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li><p><a href="https://rclone.org/install/#script-installation" target="_blank" rel="noopener">rclone</a></p>
</li>
<li><p><a href="https://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a></p>
</li>
<li><p><a href="https://github.com/janeczku/calibre-web" target="_blank" rel="noopener">Calibre-web</a></p>
</li>
<li><p><a href="https://github.com/iwestlin/gd-utils" target="_blank" rel="noopener">Gd-utils</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>玩玩</category>
      </categories>
      <tags>
        <tag>个人书库</tag>
        <tag>Calibre</tag>
        <tag>rclone</tag>
        <tag>google drive</tag>
      </tags>
  </entry>
  <entry>
    <title>backdrop-filter毛玻璃效果</title>
    <url>/2020/07/15/backdrop-filter-mao-bo-li-xiao-guo/</url>
    <content><![CDATA[<h2 id="backdrop-filter是什么"><a href="#backdrop-filter是什么" class="headerlink" title="backdrop-filter是什么"></a>backdrop-filter是什么</h2><ul>
<li><p><span style="color:yellow">跟filter类似,属性设置一样,不过它适用元素背后元素</span></p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715113252.png" alt="1"></p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715111850.png" alt="2"></p>
<blockquote>
<p>这种效果在苹果中很常见,最早也只有在<code>safari</code>浏览器兼容<br>通过这个属性,可以很简单地创建毛玻璃效果</p>
</blockquote>
</li>
<li><p>然而普通的filter一旦应用,所有元素都会受影响,比如字体也看不清</p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715114933.png" alt="3"></p>
</li>
<li><p>通过backdrop-filter可以很好解决问题</p>
</li>
</ul>
<h2 id="本站应用此效果"><a href="#本站应用此效果" class="headerlink" title="本站应用此效果"></a>本站应用此效果</h2><ul>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715114251.png" alt="4"></p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715114632.png" alt="5"></p>
</li>
</ul>
<blockquote>
<blockquote>
<p><strong>但是你可能看不到此效果,因为此特性兼容性不太好</strong></p>
</blockquote>
</blockquote>
<ul>
<li><p>通过查询<code>can i use</code>,可以看到基本国产浏览器都不支持,firefox也必须手动开启特性才能看到</p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715115222.png" alt="6"></p>
</li>
<li><p>chrome很好的支持了,nice~</p>
</li>
</ul>
<h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><ul>
<li><p>经过试验,的确firefox看不到,很影响阅读</p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715120111.png" alt="7"></p>
</li>
<li><p><span style="color:red">所以不兼容的请手动点网站右下角设置开启<code>夜间模式</code>,以免影响阅读</span></p>
</li>
<li><p>其他手机浏览器,chrome内核的基本都支持,qq浏览器等不支持.</p>
</li>
</ul>
<h2 id="毛玻璃其他解决方案"><a href="#毛玻璃其他解决方案" class="headerlink" title="毛玻璃其他解决方案"></a>毛玻璃其他解决方案</h2><p>其他方法可能兼容性更高,就查找了几篇</p>
<h3 id="纯css实现"><a href="#纯css实现" class="headerlink" title="纯css实现"></a>纯css实现</h3><ul>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715121000.png" alt=""></p>
</li>
<li><p>效果也是不错的,不过需要绝对布局</p>
</li>
</ul>
<blockquote>
<blockquote>
<p><a href="https://codepen.io/AmJustSam/full/ModORY/" target="_blank" rel="noopener">在线源码演示</a></p>
</blockquote>
</blockquote>
<ul>
<li>根据需求可以改改</li>
</ul>
<h3 id="用js库实现"><a href="#用js库实现" class="headerlink" title="用js库实现"></a>用js库实现</h3><ul>
<li><p><a href="https://github.com/niklasvh/html2canvas" target="_blank" rel="noopener">html2canvas</a></p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200715121540.png" alt=""></p>
</li>
<li><p>这样可以动态实现毛玻璃了</p>
</li>
</ul>
<blockquote>
<blockquote>
<p><a href="https://jsfiddle.net/nallenscott/WtQjY/41/" target="_blank" rel="noopener">在线源码演示</a></p>
</blockquote>
</blockquote>
<hr>
<h4 id="总之-一个道理-”省力不省功”"><a href="#总之-一个道理-”省力不省功”" class="headerlink" title="总之,一个道理,”省力不省功”"></a><span style="color:yellow">总之,一个道理,”省力不省功”</span></h4><hr>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><p><a href="https://medium.com/hackernoon/how-to-do-css-only-frosted-glass-effect-e2666bafab91" target="_blank" rel="noopener">How to do CSS only frosted glass effect?</a></p>
</li>
<li><p><a href="https://codeburst.io/ios-backdrop-effect-on-chrome-and-non-webkit-browsers-summary-of-currently-available-techniques-34b0f624ae6a" target="_blank" rel="noopener">How to create iOS Backdrop effect</a></p>
</li>
<li><p><a href="https://css-tricks.com/frosting-glass-css-filters/" target="_blank" rel="noopener">Frosting Glass with CSS Filters</a></p>
</li>
<li><p><a href="http://abduzeedo.com/ios7-frosted-glass-effect-html-5-and-javascript" target="_blank" rel="noopener">iOS7 Frosted Glass Effect with HTML 5 and Javascript</a> </p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程杂记</category>
        <category>FrontEnd</category>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>高斯模糊</tag>
        <tag>毛玻璃</tag>
      </tags>
  </entry>
  <entry>
    <title>git submodule git子模块闲搞</title>
    <url>/2020/07/21/git-submodule-git-zi-mo-kuai-xian-gao/</url>
    <content><![CDATA[<h1 id="git-submodule-折腾记"><a href="#git-submodule-折腾记" class="headerlink" title="git submodule 折腾记"></a>git submodule 折腾记</h1><h2 id="git-submodule折腾缘由"><a href="#git-submodule折腾缘由" class="headerlink" title="git submodule折腾缘由"></a>git submodule折腾缘由</h2><h3 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h3><blockquote>
<p>给博客整体做个备份，包含主题配置，自定义的一些内容等</p>
</blockquote>
<ul>
<li>由于主题themes文件夹内主题是从github直接clone下来的，所以下来后还是有.git，识别成了本地仓库。</li>
<li>然而在hexo博客外部根目录创建git仓库后，执行到git add -A时，会提醒子仓库问题，不会跟踪记录子仓库。</li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200721204842.png" alt=""></li>
</ul>
<h2 id="具体折腾过程"><a href="#具体折腾过程" class="headerlink" title="具体折腾过程"></a>具体折腾过程</h2><h3 id="直接git-submodule-add-“path-to-theme”"><a href="#直接git-submodule-add-“path-to-theme”" class="headerlink" title="直接git submodule  add “path to theme”"></a>直接<code>git submodule  add “path to theme”</code></h3><ul>
<li><p>直接在根目录执行添加子模块，然而却不是想象的结果。</p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721212247431.png" alt="image-20200721212247431"></p>
<blockquote>
<p>原本想象的是保留在原来的themes下，但是它直接clone到了根</p>
</blockquote>
</li>
<li><p>google后，发现后边还跟一个路径（还是没好好看help文档），这个路径指向themes下的话，就还保留了原本位置。</p>
<blockquote>
<p><code>git submodule add “path to theme” “themes/butterfly”</code> </p>
</blockquote>
</li>
</ul>
<h2 id="添加后还是不track"><a href="#添加后还是不track" class="headerlink" title="添加后还是不track"></a>添加后还是不track</h2><ul>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721213854942.png" alt="image-20200721213854942"></p>
</li>
<li><p>再次google后，</p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721214002640.png" alt="image-20200721214002640"></p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721214028218.png" alt="image-20200721214028218"></p>
</li>
<li><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721214055658.png" alt="image-20200721214055658"></p>
</li>
<li><p>递归执行子模块git add后并commit后，终于实现理想状态。</p>
<p>然而，在从远程拉取后，又出现了一个问题。。。</p>
</li>
</ul>
<h2 id="git-pull后，themes文件夹是空的？"><a href="#git-pull后，themes文件夹是空的？" class="headerlink" title="git pull后，themes文件夹是空的？"></a>git pull后，themes文件夹是空的？</h2><blockquote>
<p>git pull后，子模块内是空的！</p>
</blockquote>
<ul>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721214439304.png" alt="image-20200721214439304"></li>
<li>而且github仓库文件夹出现了<code>文件夹@字母</code></li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721214838006.png" alt="image-20200721214838006"></li>
<li>再再次google后</li>
<li><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200721214555139.png" alt="image-20200721214555139"></li>
<li>需要在子模块内再次拉取才行</li>
</ul>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><ul>
<li>面向google编程，面向成功~</li>
<li>不想看文档，不想看帮助，那就多google</li>
<li>不管结果如何，先把错误复制到google搜索一顿再说</li>
<li>总之，google是走向成功的阶梯</li>
<li>“省力不省功”</li>
</ul>
<hr>
<hr>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><p><a href="https://forum.freecodecamp.org/t/how-to-remove-a-submodule-in-git/13228" target="_blank" rel="noopener">How to remove a submodule in Git</a></p>
</li>
<li><p><a href="http://www.huati365.com/answer/Vx2jzwLGqGvYAbM" target="_blank" rel="noopener"><strong>git add -A不在目录中添加所有修改的文件</strong></a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/50167969/how-to-fix-modified-content-untracked-content-in-git" target="_blank" rel="noopener">How to fix “modified content, untracked content” in git?</a></p>
</li>
<li><p><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" target="_blank" rel="noopener">Git doc</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>编程杂记</category>
        <category>Linux</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Git</tag>
        <tag>博客</tag>
        <tag>Git submodule</tag>
      </tags>
  </entry>
  <entry>
    <title>ide般的vim--SpaceVim</title>
    <url>/2020/07/28/ide-ban-de-vim-spacevim/</url>
    <content><![CDATA[<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200729111613.png" alt=""></p>
<h2 id="Vim安装"><a href="#Vim安装" class="headerlink" title="Vim安装"></a>Vim安装</h2><blockquote>
<p><span style="color:green">这些基本安装不多详细描述，按照流程就行了</span></p>
</blockquote>
<blockquote>
<ul>
<li><p><a href="https://www.vim.org/" target="_blank" rel="noopener">vim官网</a></p>
</li>
<li><p>更详细和准确指南，请参照官网</p>
</li>
</ul>
</blockquote>
<h3 id="Linux或macOS安装-类unix系"><a href="#Linux或macOS安装-类unix系" class="headerlink" title="Linux或macOS安装(类unix系)"></a>Linux或macOS安装(类unix系)</h3><h4 id="使用git安装"><a href="#使用git安装" class="headerlink" title="使用git安装"></a>使用git安装</h4><blockquote>
<p>此方法通用</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/vim/vim.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> vim/src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 使用此方式会获取最新版vim，包含了所有的额外补丁。</p>
</blockquote>
<h4 id="其他linux发行版"><a href="#其他linux发行版" class="headerlink" title="其他linux发行版"></a>其他linux发行版</h4><ul>
<li><a href="http://packages.debian.org/vim" target="_blank" rel="noopener">Debian</a></li>
<li><a href="http://wwws.sun.com/software/solaris/freeware/" target="_blank" rel="noopener">Sun Solaris</a></li>
<li>更多参照<a href="https://www.vim.org/" target="_blank" rel="noopener">官网</a></li>
</ul>
<h4 id="mac安装"><a href="#mac安装" class="headerlink" title="mac安装"></a>mac安装</h4><ul>
<li><code>brew install vim</code></li>
<li>安装 <code>MacVim</code>mac定制版vim</li>
<li>更多选择看官网</li>
</ul>
<h4 id="其他还有neovim等vim其他发行版本，可以选择型安装"><a href="#其他还有neovim等vim其他发行版本，可以选择型安装" class="headerlink" title="其他还有neovim等vim其他发行版本，可以选择型安装"></a>其他还有neovim等vim其他发行版本，可以选择型安装</h4><blockquote>
<p>推荐看官方文档安装，本记录简化了步骤，可能缺失部分探索的元素</p>
</blockquote>
<h3 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h3><blockquote>
<p>具体看<a href="https://www.vim.org" target="_blank" rel="noopener">官方教程</a></p>
</blockquote>
<hr>
<h2 id="Vim入门推荐"><a href="#Vim入门推荐" class="headerlink" title="Vim入门推荐"></a>Vim入门推荐</h2><h3 id="vimtutor命令"><a href="#vimtutor命令" class="headerlink" title="vimtutor命令"></a><code>vimtutor</code>命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vimtutor</span></span><br></pre></td></tr></table></figure>

<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200728225111148.png" alt="image-20200728225111148"></p>
<ul>
<li>进入官方指南入门教程，比较全面详细</li>
<li>英文版，英语不好的话有点吃力</li>
</ul>
<h3 id="通过游戏入门"><a href="#通过游戏入门" class="headerlink" title="通过游戏入门"></a>通过游戏入门</h3><blockquote>
<p><a href="https://vim-adventures.com/" target="_blank" rel="noopener">Learn Vim</a></p>
</blockquote>
<p>这是一款网页游戏，很有意思，vim学习起来舒服多了~</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200728225543727.png" alt="image-20200728225543727"></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>菜鸟教程 &lt;菜(da)鸟(shen)必备&gt;</li>
<li>Google搜索</li>
<li>官方Doc</li>
</ul>
<h2 id="SpaceVim安装与配置"><a href="#SpaceVim安装与配置" class="headerlink" title="SpaceVim安装与配置"></a>SpaceVim安装与配置</h2><blockquote>
<p><a href="[https://spacevim.org/cn/quick-start-guide/#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE](https://spacevim.org/cn/quick-start-guide/#基本配置)">官方中文教程</a></p>
</blockquote>
<h3 id="官方一键安装脚本"><a href="#官方一键安装脚本" class="headerlink" title="官方一键安装脚本"></a>官方一键安装脚本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sLf https://spacevim.org/cn/install.sh | bash</span><br></pre></td></tr></table></figure>

<blockquote>
<p>由于你懂得原因，使用此链接安装比较慢，请自备绿色上网工具优化体验~</p>
</blockquote>
<p>官方还有个帮助脚本，很全面，各种操作都包含了–</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sLf https://spacevim.org/cn/install.sh | bash -s -- -h</span><br></pre></td></tr></table></figure>

<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200729115058170.png" alt="image-20200729115058170"></p>
<h3 id="Docker安装（推荐）"><a href="#Docker安装（推荐）" class="headerlink" title="Docker安装（推荐）"></a>Docker安装（推荐）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull spacevim/spacevim</span><br><span class="line">docker run -it --rm spacevim/spacevim nvim</span><br></pre></td></tr></table></figure>

<blockquote>
<p>推荐docker，各种优势</p>
</blockquote>
<h3 id="入门基本配置"><a href="#入门基本配置" class="headerlink" title="入门基本配置"></a>入门基本配置</h3><p>SpaceVim默认配置文件为<code>~/.SpaceVim.d/init.toml</code>，打开此文件编辑，或者进入<code>vim</code>依次同时按<code>space f v d</code>即可快捷打开默认配置文件。</p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/20200729105949.png" alt="配置文件"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这是一个基础的 SpaceVim 配置示例</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有的 SpaceVim 选项都列在 [options] 之下</span></span><br><span class="line">[options]</span><br><span class="line">    # 设置 SpaceVim 主题及背景，默认的主题是 gruvbox，如果你需要使用更</span><br><span class="line">    # 多的主题，你可以载入 colorscheme 模块</span><br><span class="line">    colorscheme = "gruvbox"</span><br><span class="line">    # 背景可以取值 "dark" 或 "light"</span><br><span class="line">    colorscheme_bg = "dark"</span><br><span class="line">    # 启用/禁用终端真色，在目前大多数终端下都是支持真色的，当然也有</span><br><span class="line">    # 一小部分终端不支持真色，如果你的 SpaceVim 颜色看上去比较怪异</span><br><span class="line">    # 可以禁用终端真色，将下面的值设为 false</span><br><span class="line">    enable_guicolors = true</span><br><span class="line">    # 设置状态栏上分割符号形状，如果字体安装失败，可以将值设为 "nil" 以</span><br><span class="line">    # 禁用分割符号，默认为箭头 "arrow"</span><br><span class="line">    statusline_separator = "nil"</span><br><span class="line">    statusline_inactive_separator = "bar"</span><br><span class="line">    # 设置顶部标签列表序号类型，有以下五种类型，分别是 0 - 4</span><br><span class="line">    # 0: 1 ➛ ➊</span><br><span class="line">    # 1: 1 ➛ ➀</span><br><span class="line">    # 2: 1 ➛ ⓵</span><br><span class="line">    # 3: 1 ➛ ¹</span><br><span class="line">    # 4: 1 ➛ 1</span><br><span class="line">    buffer_index_type = 4</span><br><span class="line">    # 显示/隐藏顶部标签栏上的文件类型图标，这一图标需要安装 nerd fonts，</span><br><span class="line">    # 如果未能成功安装这一字体，可以隐藏图标</span><br><span class="line">    enable_tabline_filetype_icon = true</span><br><span class="line">    # 是否在状态栏上显示当前模式，默认情况下，不显示 Normal/Insert 等</span><br><span class="line">    # 字样，只以颜色区分当前模式</span><br><span class="line">    enable_statusline_mode = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> SpaceVim 模块设置，主要包括启用/禁用模块</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启用 autocomplete 模块，启用模块时，可以列出一些模块选项，并赋值，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于模块的选项，请阅读各个模块的文档</span></span><br><span class="line">[[layers]]</span><br><span class="line">    name = "autocomplete"</span><br><span class="line">    auto-completion-return-key-behavior = "complete"</span><br><span class="line">    auto-completion-tab-key-behavior = "cycle"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用 shell 模块，禁用模块时，需要加入 <span class="built_in">enable</span> = <span class="literal">false</span></span></span><br><span class="line">[[layers]]</span><br><span class="line">    name = "shell"</span><br><span class="line">    enable = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加自定义插件</span></span><br><span class="line">[[custom_plugins]]</span><br><span class="line">    repo = "lilydjwg/colorizer"</span><br><span class="line">    merged = false</span><br></pre></td></tr></table></figure>

<p>更多配置，更多DIY，参照<a href="https://spacevim.org/cn/documentation/" target="_blank" rel="noopener">官方文档</a>进行配置</p>
<h2 id="SpaceVim的Java环境配置"><a href="#SpaceVim的Java环境配置" class="headerlink" title="SpaceVim的Java环境配置"></a>SpaceVim的Java环境配置</h2><blockquote>
<p>就拿Java搭建吧</p>
<p><a href="https://spacevim.org/cn/use-vim-as-a-java-ide/" target="_blank" rel="noopener">官方教程</a></p>
</blockquote>
<h3 id="启动模块"><a href="#启动模块" class="headerlink" title="启动模块"></a>启动模块</h3><p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200729112831999.png" alt="image-20200729112831999"></p>
<blockquote>
<p>启用 <code>lang#java</code> 模块后，在打开 java 文件时，就可以使用语言专属快捷键，这些快捷键都是以 <code>SPC l</code> 为前缀的。</p>
</blockquote>
<blockquote>
<p><code>lang#java</code> 模块主要采用插件 vim-javacomplete2，该插件可以自动读取工程配置文件，获取当前项目的 classpath， 目前支持的项目包括 maven、gradle 以及 eclipse 下的配置文件。</p>
</blockquote>
<h3 id="配置语言服务"><a href="#配置语言服务" class="headerlink" title="配置语言服务"></a>配置语言服务</h3><blockquote>
<p>若需要启动 Java 语言服务支持，可以启用 lsp 模块，以下配置示例使用 <a href="http://ftp.yz.yamagata-u.ac.jp/pub/eclipse/jdtls/snapshots/jdt-language-server-latest.tar.gz" target="_blank" rel="noopener">eclipse.jdt.ls</a>，下载后并解压：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[[layers]]</span><br><span class="line">  name = "lsp"</span><br><span class="line">  filetypes = [</span><br><span class="line">    "java"</span><br><span class="line">  ]</span><br><span class="line">  [layers.override_cmd]</span><br><span class="line">    java = [</span><br><span class="line">    "java",</span><br><span class="line">    "-Declipse.application=org.eclipse.jdt.ls.core.id1",</span><br><span class="line">    "-Dosgi.bundles.defaultStartLevel=4",</span><br><span class="line">    "-Declipse.product=org.eclipse.jdt.ls.core.product",</span><br><span class="line">    "-Dlog.protocol=true",</span><br><span class="line">    "-Dlog.level=NONE",</span><br><span class="line">    "-noverify",</span><br><span class="line">    "-Xmx1G",</span><br><span class="line">    "-jar",</span><br><span class="line">    "/Users/gentlemanhu/Documents/SomeStuff/forDev&amp;some\ tools/jdt/jdt-language-server-latest/plugins/org.eclipse.equinox.launcher_1.5.700.v20200207-2156.jar",</span><br><span class="line">    "-configuration",</span><br><span class="line">    "/Users/gentlemanhu/Documents/SomeStuff/forDev&amp;some\ tools/jdt/jdt-language-server-latest/config_mac",</span><br><span class="line">    "-data",</span><br><span class="line"> "/Users/gentlemanhu/Documents/Codes/Languages&amp;Explore/Java/.cache/javalsp"</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<p>基本上就需要配置三个路径，</p>
<ul>
<li><code>-jar</code>：lanucher路径</li>
<li><code>-configuration</code>: 平台相关的配置文件路径</li>
<li><code>-data</code>: 语言服务器运行位置</li>
</ul>
<h3 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h3><blockquote>
<p><code>vim-javacomplete2</code>为 java 项目提供了很好的代码补全功能，配合 <code>autocomplete</code>模块，可以在编辑代码时实时补全代码，并且可以模糊匹配。</p>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200729114439267.png" alt="image-20200729114439267"></p>
<h3 id="插件模块自动安装"><a href="#插件模块自动安装" class="headerlink" title="插件模块自动安装"></a>插件模块自动安装</h3><ul>
<li>不需要过多操作，配置好文件，再打开vim就自动安装了，很舒服</li>
</ul>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200729114722809.png" alt="image-20200729114722809"></p>
<h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><ul>
<li>语法树</li>
<li>交互编程</li>
<li>语法检查</li>
<li>等等</li>
<li>具体配置看<a href="[https://spacevim.org/cn/use-vim-as-a-java-ide/#%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BC%96%E7%A8%8B](https://spacevim.org/cn/use-vim-as-a-java-ide/#交互式编程)">官方文档</a></li>
</ul>
<blockquote>
<p>要想配置成合自己口味的，还得自己去摸索实践~</p>
</blockquote>
<h3 id="报错问题解决"><a href="#报错问题解决" class="headerlink" title="报错问题解决"></a>报错问题解决</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[vimproc] vimproc's DLL: "/Users/gentl...Please read :help vimproc and make it.</span><br></pre></td></tr></table></figure>

<p>不论打开vim还是neovim，都会在下方报错</p>
<p>那就根据指示修复吧<code>:help vimproc</code></p>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/image-20200729115331844.png" alt="image-20200729115331844"></p>
<blockquote>
<p>写的就是它是很牛逼的异步库，让我们安装，那就安装吧</p>
</blockquote>
<blockquote>
<p><a href="https://github.com/Shougo/vimproc.vim" target="_blank" rel="noopener">Vimproc.vim</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Shougo/vimproc.vim</span><br></pre></td></tr></table></figure>

<p>克隆到~/.vim/bundle/目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd vimproc.vim/</span><br><span class="line">make</span><br></pre></td></tr></table></figure>

<p>然后再打开vim就自动安装了，没有报错了</p>
<h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><ul>
<li><a href="https://everettjf.gitbooks.io/spacevimtutorial/content/" target="_blank" rel="noopener">SpaceVim入门</a></li>
<li><a href="https://github.com/Gabirel/Hack-SpaceVim" target="_blank" rel="noopener">HackSpaceVim</a></li>
<li><a href="https://spacevim.org/cn/documentation/" target="_blank" rel="noopener">官方文档</a></li>
</ul>
<hr>
<blockquote>
<p>有了这个ide，还要什么鼠标，各种快捷键，双手不离键盘，真·键盘侠~</p>
</blockquote>
<blockquote>
<p>这些东西，一时兴起也可以玩玩。当然只有不断熟悉，不断使用，才能真正发挥其强大的功能和特性。</p>
</blockquote>
<blockquote>
<p>适合自己的才是最好的，vscode+extensions||neovim+plugins.</p>
</blockquote>
]]></content>
      <categories>
        <category>编程杂记</category>
        <category>Linux</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>VScode</tag>
        <tag>Vim</tag>
        <tag>Ide</tag>
        <tag>SpaceVim</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>关于invoke和call的区别</title>
    <url>/2020/07/11/guan-yu-invoke-he-call-de-qu-bie/</url>
    <content><![CDATA[<h1 id="关于invoke和call的区别"><a href="#关于invoke和call的区别" class="headerlink" title="关于invoke和call的区别"></a>关于invoke和call的区别</h1><ul>
<li><p>Function calling is when you call a function yourself in a program.</p>
</li>
<li><p>While function invoking is when it gets called automatically.</p>
</li>
</ul>
<blockquote>
<p><span style="color:yellow">call是你主动call函数或方法的,invoke是程序自动触发或被触发的.</span></p>
</blockquote>
<blockquote>
<blockquote>
<p><em><a href="https://www.quora.com/What-is-the-difference-between-call-and-invoke" target="_blank" rel="noopener">具体答案</a></em></p>
</blockquote>
</blockquote>
<p><img src= "https://cdn.jsdelivr.net/gh/GentlemanHu/GentlemanHu.github.io@0a07ead/img/loading.gif" data-src="https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/original-vofan-long+hair-highres-open+mouth-blue+eyes.jpg" alt="cover"></p>
<h1 id="干就完了"><a href="#干就完了" class="headerlink" title="干就完了"></a>干就完了</h1>]]></content>
      <categories>
        <category>编程杂记</category>
        <category>随手记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程日常</tag>
        <tag>关键字</tag>
      </tags>
  </entry>
</search>
