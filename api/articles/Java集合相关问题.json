{"title":"Java探索之集合","slug":"Java集合相关问题","date":"2020-09-20T09:18:10.000Z","updated":"2023-11-06T14:15:17.980Z","comments":true,"path":"api/articles/Java集合相关问题.json","excerpt":null,"covers":["https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/java.png"],"content":"<h2 id=\"Java集合相关问题\"><a href=\"#Java集合相关问题\" class=\"headerlink\" title=\"Java集合相关问题\"></a>Java集合相关问题</h2><h3 id=\"List，Set，Map区别\"><a href=\"#List，Set，Map区别\" class=\"headerlink\" title=\"List，Set，Map区别\"></a>List，Set，Map区别</h3><p><img src= \"/img/loading.gif\" data-src=\"https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/java.png\" alt=\"\"></p>\n<p><a href=\"https://www.javatpoint.com/collections-in-java\" target=\"_blank\" rel=\"noopener\">Collections框架延伸</a></p>\n<p><a href=\"https://www.javatpoint.com/java-map\" target=\"_blank\" rel=\"noopener\">Map延伸</a></p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><ul>\n<li>List（顺序）：List接口存储一组不唯一（可以多个元素引用相同对象），有序的对象。</li>\n<li>Set（注重独一无二）：元素不可重复，不会多个元素引用相同对象。</li>\n<li>Map（Key来搜索）：键值对存储。Map会维护与Key有关联的值，两个Key可以引用相同的对象，Key不可重复。</li>\n</ul>\n<h3 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h3><ol>\n<li>是否保证线程安全：ArrayList 和LinkedList都是不同步的，线程不安全。</li>\n<li>底层数据结构：ArrayList底层用的Object数组；LinkedList底层使用双向链表数据结构（JDK1.6之前为循环链表，JDK1.7取消循环）<ol start=\"3\">\n<li>插入和删除是否受元素位置影响：<ol>\n<li>ArrayList采用数组存储，所以插入和删除元素时间复杂度收到元素位置影响。add(E e)，会把元素追加到列表末尾，O(1);若在指定<code>i</code>处插入或删除，(add(int index,E element))，O(n-i)，因为在进行操作时候，集合中第i和第i个元素之后的（n-i）个元素都要执行向后/向前移一位的操作。</li>\n<li>LinkedList采用链表存储，碎玉add(E e)方法插入删除，时间复杂度都近似O(1)，如果要在指定位置i插入和删除元素，O(n)。</li>\n</ol>\n</li>\n<li></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ArrayList扩容机制\"><a href=\"#ArrayList扩容机制\" class=\"headerlink\" title=\"ArrayList扩容机制\"></a>ArrayList扩容机制</h3><h3 id=\"HashMap和Hashtable区别\"><a href=\"#HashMap和Hashtable区别\" class=\"headerlink\" title=\"HashMap和Hashtable区别\"></a>HashMap和Hashtable区别</h3><h3 id=\"HashMap和HashSet区别\"><a href=\"#HashMap和HashSet区别\" class=\"headerlink\" title=\"HashMap和HashSet区别\"></a>HashMap和HashSet区别</h3><h3 id=\"HashSet如何检查重复\"><a href=\"#HashSet如何检查重复\" class=\"headerlink\" title=\"HashSet如何检查重复\"></a>HashSet如何检查重复</h3><h3 id=\"HashMap底层实现原理\"><a href=\"#HashMap底层实现原理\" class=\"headerlink\" title=\"HashMap底层实现原理\"></a>HashMap底层实现原理</h3><h3 id=\"为何HashMap长度是2的幂次方\"><a href=\"#为何HashMap长度是2的幂次方\" class=\"headerlink\" title=\"为何HashMap长度是2的幂次方\"></a>为何HashMap长度是2的幂次方</h3><h3 id=\"HashMap多线程死循环问题\"><a href=\"#HashMap多线程死循环问题\" class=\"headerlink\" title=\"HashMap多线程死循环问题\"></a>HashMap多线程死循环问题</h3><h3 id=\"ConcurrentHashMap和HashTable的区别\"><a href=\"#ConcurrentHashMap和HashTable的区别\" class=\"headerlink\" title=\"ConcurrentHashMap和HashTable的区别\"></a>ConcurrentHashMap和HashTable的区别</h3><h3 id=\"ConcurrentHashMap线程安全的原理\"><a href=\"#ConcurrentHashMap线程安全的原理\" class=\"headerlink\" title=\"ConcurrentHashMap线程安全的原理\"></a>ConcurrentHashMap线程安全的原理</h3><h3 id=\"comparable和Compatator的区别\"><a href=\"#comparable和Compatator的区别\" class=\"headerlink\" title=\"comparable和Compatator的区别\"></a>comparable和Compatator的区别</h3><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h4><h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4>","more":"<h2 id=\"Java集合相关问题\"><a href=\"#Java集合相关问题\" class=\"headerlink\" title=\"Java集合相关问题\"></a>Java集合相关问题</h2><h3 id=\"List，Set，Map区别\"><a href=\"#List，Set，Map区别\" class=\"headerlink\" title=\"List，Set，Map区别\"></a>List，Set，Map区别</h3><p><img src=\"https://cdn.jsdelivr.net/gh/gentlemanhu/public-store/images/java.png\" alt=\"\"></p>\n<p><a href=\"https://www.javatpoint.com/collections-in-java\" target=\"_blank\" rel=\"noopener\">Collections框架延伸</a></p>\n<p><a href=\"https://www.javatpoint.com/java-map\" target=\"_blank\" rel=\"noopener\">Map延伸</a></p>\n<h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><ul>\n<li>List（顺序）：List接口存储一组不唯一（可以多个元素引用相同对象），有序的对象。</li>\n<li>Set（注重独一无二）：元素不可重复，不会多个元素引用相同对象。</li>\n<li>Map（Key来搜索）：键值对存储。Map会维护与Key有关联的值，两个Key可以引用相同的对象，Key不可重复。</li>\n</ul>\n<h3 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h3><ol>\n<li>是否保证线程安全：ArrayList 和LinkedList都是不同步的，线程不安全。</li>\n<li>底层数据结构：ArrayList底层用的Object数组；LinkedList底层使用双向链表数据结构（JDK1.6之前为循环链表，JDK1.7取消循环）<ol start=\"3\">\n<li>插入和删除是否受元素位置影响：<ol>\n<li>ArrayList采用数组存储，所以插入和删除元素时间复杂度收到元素位置影响。add(E e)，会把元素追加到列表末尾，O(1);若在指定<code>i</code>处插入或删除，(add(int index,E element))，O(n-i)，因为在进行操作时候，集合中第i和第i个元素之后的（n-i）个元素都要执行向后/向前移一位的操作。</li>\n<li>LinkedList采用链表存储，碎玉add(E e)方法插入删除，时间复杂度都近似O(1)，如果要在指定位置i插入和删除元素，O(n)。</li>\n</ol>\n</li>\n<li></li>\n</ol>\n</li>\n</ol>\n<h3 id=\"ArrayList扩容机制\"><a href=\"#ArrayList扩容机制\" class=\"headerlink\" title=\"ArrayList扩容机制\"></a>ArrayList扩容机制</h3><h3 id=\"HashMap和Hashtable区别\"><a href=\"#HashMap和Hashtable区别\" class=\"headerlink\" title=\"HashMap和Hashtable区别\"></a>HashMap和Hashtable区别</h3><h3 id=\"HashMap和HashSet区别\"><a href=\"#HashMap和HashSet区别\" class=\"headerlink\" title=\"HashMap和HashSet区别\"></a>HashMap和HashSet区别</h3><h3 id=\"HashSet如何检查重复\"><a href=\"#HashSet如何检查重复\" class=\"headerlink\" title=\"HashSet如何检查重复\"></a>HashSet如何检查重复</h3><h3 id=\"HashMap底层实现原理\"><a href=\"#HashMap底层实现原理\" class=\"headerlink\" title=\"HashMap底层实现原理\"></a>HashMap底层实现原理</h3><h3 id=\"为何HashMap长度是2的幂次方\"><a href=\"#为何HashMap长度是2的幂次方\" class=\"headerlink\" title=\"为何HashMap长度是2的幂次方\"></a>为何HashMap长度是2的幂次方</h3><h3 id=\"HashMap多线程死循环问题\"><a href=\"#HashMap多线程死循环问题\" class=\"headerlink\" title=\"HashMap多线程死循环问题\"></a>HashMap多线程死循环问题</h3><h3 id=\"ConcurrentHashMap和HashTable的区别\"><a href=\"#ConcurrentHashMap和HashTable的区别\" class=\"headerlink\" title=\"ConcurrentHashMap和HashTable的区别\"></a>ConcurrentHashMap和HashTable的区别</h3><h3 id=\"ConcurrentHashMap线程安全的原理\"><a href=\"#ConcurrentHashMap线程安全的原理\" class=\"headerlink\" title=\"ConcurrentHashMap线程安全的原理\"></a>ConcurrentHashMap线程安全的原理</h3><h3 id=\"comparable和Compatator的区别\"><a href=\"#comparable和Compatator的区别\" class=\"headerlink\" title=\"comparable和Compatator的区别\"></a>comparable和Compatator的区别</h3><h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><h4 id=\"Collection\"><a href=\"#Collection\" class=\"headerlink\" title=\"Collection\"></a>Collection</h4><h4 id=\"Map\"><a href=\"#Map\" class=\"headerlink\" title=\"Map\"></a>Map</h4>","categories":[{"name":"Godway","path":"api/categories/Godway.json"},{"name":"Java","path":"api/categories/Java.json"},{"name":"Basics","path":"api/categories/Basics.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Collections","path":"api/tags/Collections.json"},{"name":"Map","path":"api/tags/Map.json"}]}