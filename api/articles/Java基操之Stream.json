{"title":"Java基操之Stream","slug":"Java基操之Stream","date":"2020-09-11T15:11:59.000Z","updated":"2023-11-06T14:15:17.979Z","comments":true,"path":"api/articles/Java基操之Stream.json","excerpt":null,"covers":null,"content":"<h2 id=\"Java-Stream操作\"><a href=\"#Java-Stream操作\" class=\"headerlink\" title=\"Java Stream操作\"></a>Java Stream操作</h2><p><a href=\"https://dzone.com/articles/become-a-master-of-java-streams-part-1-creating-st\" target=\"_blank\" rel=\"noopener\">Dzone</a></p>\n<p><a href=\"https://www.jrebel.com/blog/java-streams-cheat-sheet\" target=\"_blank\" rel=\"noopener\">cheatsheet</a></p>\n<p><a href=\"https://www.baeldung.com/java-8-collectors\" target=\"_blank\" rel=\"noopener\">Collectors</a></p>\n<p><a href=\"https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md\" target=\"_blank\" rel=\"noopener\">Collections</a></p>\n<blockquote>\n<p>流水线式的处理数据</p>\n</blockquote>\n<ul>\n<li>生产流的方式<ul>\n<li>Collection集合</li>\n<li>Map集合</li>\n<li>数组</li>\n</ul>\n</li>\n<li>中间操作<ul>\n<li>Stream<T> filter(Predicate predicate)利用谓词接口进行过滤筛选.</li>\n<li>Stream<T> limit(long n)截断流中数据,n为返回个数</li>\n<li>Stream<T> skip(long n)指定跳过n个数据,返回剩下的流</li>\n<li>static <T> Stream<T> concat(Stream a,Stream b)组合两个流成一个流</li>\n<li>Stream<T> distinct()返回流中独特的元素组成的流</li>\n<li>Stream<T> sorted()返回自然排序后的流</li>\n<li>Stream<T> sorted(Comparator comparator)返回经过自定义比较器的排序流</li>\n<li><R> Stream<R> map(Function mapper)返回经过指定函数处理的结果的流</li>\n<li>IntStream mapToInt(ToIntFunction mapper)返回IntStream,源流映射成Int流</li>\n</ul>\n</li>\n<li>终结操作<ul>\n<li>一般操作<ul>\n<li>void forEach(Consumer action)指定消费器,对每个流中元素进行消费</li>\n<li>long count()返回流中元素个数</li>\n</ul>\n</li>\n<li>收集操作<ul>\n<li>R collect(Collector collector)把结果收集到集合中</li>\n<li>Collectors<ul>\n<li>public static <T> Collector toList() 收集流到List集合中</li>\n<li>public static <T> Collector toSet() 收集流得到Set集合中</li>\n<li>public static Collector toMap(Function keyMapper,Function valueMapper) 收集元素到Map集合中</li>\n<li>此工具类返回的都是包含所有元素的Collector</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实例操作Stream\"><a href=\"#实例操作Stream\" class=\"headerlink\" title=\"实例操作Stream\"></a>实例操作Stream</h4><ul>\n<li>Collection生成Stream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; listStream = list.stream();</span><br><span class=\"line\"></span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; setStream = set.stream();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Map系列生成Stream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class=\"line\">Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class=\"line\">Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; entryStream = map.entrySet().stream();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组生成Stream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] strArray = &#123;<span class=\"string\">\"hell\"</span>,<span class=\"string\">\"world\"</span>,<span class=\"string\">\"niubi\"</span>&#125;;</span><br><span class=\"line\">Stream&lt;String&gt; strStream = Stream.of(strArray);</span><br><span class=\"line\">Stream&lt;String&gt; okStream = Stream.of(<span class=\"string\">\"jjj\"</span>,<span class=\"string\">\"hahha\"</span>,<span class=\"string\">\"iii\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"笔记扩充\"><a href=\"#笔记扩充\" class=\"headerlink\" title=\"笔记扩充\"></a><a href=\"https://docs.crushing.xyz/java/sugar-and-skill/java-han-shu-shi-bian-cheng\" target=\"_blank\" rel=\"noopener\">笔记扩充</a></h3>","more":"<h2 id=\"Java-Stream操作\"><a href=\"#Java-Stream操作\" class=\"headerlink\" title=\"Java Stream操作\"></a>Java Stream操作</h2><p><a href=\"https://dzone.com/articles/become-a-master-of-java-streams-part-1-creating-st\" target=\"_blank\" rel=\"noopener\">Dzone</a></p>\n<p><a href=\"https://www.jrebel.com/blog/java-streams-cheat-sheet\" target=\"_blank\" rel=\"noopener\">cheatsheet</a></p>\n<p><a href=\"https://www.baeldung.com/java-8-collectors\" target=\"_blank\" rel=\"noopener\">Collectors</a></p>\n<p><a href=\"https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md\" target=\"_blank\" rel=\"noopener\">Collections</a></p>\n<blockquote>\n<p>流水线式的处理数据</p>\n</blockquote>\n<ul>\n<li>生产流的方式<ul>\n<li>Collection集合</li>\n<li>Map集合</li>\n<li>数组</li>\n</ul>\n</li>\n<li>中间操作<ul>\n<li>Stream<T> filter(Predicate predicate)利用谓词接口进行过滤筛选.</li>\n<li>Stream<T> limit(long n)截断流中数据,n为返回个数</li>\n<li>Stream<T> skip(long n)指定跳过n个数据,返回剩下的流</li>\n<li>static <T> Stream<T> concat(Stream a,Stream b)组合两个流成一个流</li>\n<li>Stream<T> distinct()返回流中独特的元素组成的流</li>\n<li>Stream<T> sorted()返回自然排序后的流</li>\n<li>Stream<T> sorted(Comparator comparator)返回经过自定义比较器的排序流</li>\n<li><R> Stream<R> map(Function mapper)返回经过指定函数处理的结果的流</li>\n<li>IntStream mapToInt(ToIntFunction mapper)返回IntStream,源流映射成Int流</li>\n</ul>\n</li>\n<li>终结操作<ul>\n<li>一般操作<ul>\n<li>void forEach(Consumer action)指定消费器,对每个流中元素进行消费</li>\n<li>long count()返回流中元素个数</li>\n</ul>\n</li>\n<li>收集操作<ul>\n<li>R collect(Collector collector)把结果收集到集合中</li>\n<li>Collectors<ul>\n<li>public static <T> Collector toList() 收集流到List集合中</li>\n<li>public static <T> Collector toSet() 收集流得到Set集合中</li>\n<li>public static Collector toMap(Function keyMapper,Function valueMapper) 收集元素到Map集合中</li>\n<li>此工具类返回的都是包含所有元素的Collector</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"实例操作Stream\"><a href=\"#实例操作Stream\" class=\"headerlink\" title=\"实例操作Stream\"></a>实例操作Stream</h4><ul>\n<li>Collection生成Stream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; listStream = list.stream();</span><br><span class=\"line\"></span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> HashSet&lt;String&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; setStream = set.stream();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Map系列生成Stream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String,Integer&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class=\"line\">Stream&lt;String&gt; keyStream = map.keySet().stream();</span><br><span class=\"line\">Stream&lt;Integer&gt; valueStream = map.values().stream();</span><br><span class=\"line\">Stream&lt;Map.Entry&lt;String,Integer&gt;&gt; entryStream = map.entrySet().stream();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数组生成Stream</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] strArray = &#123;<span class=\"string\">\"hell\"</span>,<span class=\"string\">\"world\"</span>,<span class=\"string\">\"niubi\"</span>&#125;;</span><br><span class=\"line\">Stream&lt;String&gt; strStream = Stream.of(strArray);</span><br><span class=\"line\">Stream&lt;String&gt; okStream = Stream.of(<span class=\"string\">\"jjj\"</span>,<span class=\"string\">\"hahha\"</span>,<span class=\"string\">\"iii\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"笔记扩充\"><a href=\"#笔记扩充\" class=\"headerlink\" title=\"笔记扩充\"></a><a href=\"https://docs.crushing.xyz/java/sugar-and-skill/java-han-shu-shi-bian-cheng\" target=\"_blank\" rel=\"noopener\">笔记扩充</a></h3>","categories":[{"name":"Godway","path":"api/categories/Godway.json"},{"name":"Java","path":"api/categories/Java.json"},{"name":"Basics","path":"api/categories/Basics.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"基础","path":"api/tags/基础.json"},{"name":"Stream","path":"api/tags/Stream.json"}]}