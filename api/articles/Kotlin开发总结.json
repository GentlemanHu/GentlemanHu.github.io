{"title":"Kotlin开发总结","slug":"Kotlin开发总结","date":"2021-11-05T06:44:33.000Z","updated":"2023-11-06T14:15:17.980Z","comments":true,"path":"api/articles/Kotlin开发总结.json","excerpt":null,"covers":null,"content":"<h2 id=\"Kotlin基础\"><a href=\"#Kotlin基础\" class=\"headerlink\" title=\"Kotlin基础\"></a>Kotlin基础</h2><blockquote>\n<p><a href=\"https://kotlinlang.org/docs/basic-syntax.html#variables\" target=\"_blank\" rel=\"noopener\">Kotlin_Basics</a></p>\n</blockquote>\n<h3 id=\"类与方法\"><a href=\"#类与方法\" class=\"headerlink\" title=\"类与方法\"></a>类与方法</h3><blockquote>\n<p><a href=\"https://kotlinlang.org/docs/functions.html#default-arguments\" target=\"_blank\" rel=\"noopener\">Kotlin_Functions</a></p>\n<p><a href=\"https://kotlinlang.org/docs/lambdas.html#lambda-expression-syntax\" target=\"_blank\" rel=\"noopener\">Lambda</a></p>\n<p>都是冒号<code>:</code>，继承，变量类型定义，都是冒号，跟在冒号后边</p>\n</blockquote>\n<ul>\n<li><p>定义方法 <code>fun</code> functionName(): <code>T</code>{} </p>\n<blockquote>\n<p>用 <code>:</code>后边跟返回类型，不写默认 Unit ，可以定义泛型</p>\n</blockquote>\n</li>\n<li><p>方法后边可直接跟表达式，返回类型编译器可以自动推断</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(n1:<span class=\"type\">Int</span>,n2:<span class=\"type\">Int</span>)</span></span> = n1 + n2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法的形参可以有默认值</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">nice</span><span class=\"params\">(s1:<span class=\"type\">String</span>=<span class=\"string\">\"我\"</span>,s2:<span class=\"type\">String</span>=<span class=\"string\">\"真NB\"</span>)</span></span> = s1 + s2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法参数可以使Lambda</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ok</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       no:<span class=\"type\">Boolean</span>=<span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       yes:()-&gt;<span class=\"type\">Unit</span>=&#123;println(<span class=\"string\">\"oh yeah\"</span>)</span></span>&#125;,</span><br><span class=\"line\">      )=&#123;</span><br><span class=\"line\">    \tyes()</span><br><span class=\"line\">   \tprintln(no)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数最后一个lambda可以再调用时候直接写成代码块</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ok(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// yes lambda block yes代码块</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此方法最好写成<code>inline</code>函数，某种程度上提升性能</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"判断与循环\"><a href=\"#判断与循环\" class=\"headerlink\" title=\"判断与循环\"></a>判断与循环</h3><h3 id=\"集合，in-when\"><a href=\"#集合，in-when\" class=\"headerlink\" title=\"集合，in,when\"></a>集合，<code>in</code>,<code>when</code></h3><h3 id=\"String模板\"><a href=\"#String模板\" class=\"headerlink\" title=\"String模板\"></a>String模板</h3><h3 id=\"空处理，Nullable-values-和-null-checks\"><a href=\"#空处理，Nullable-values-和-null-checks\" class=\"headerlink\" title=\"空处理，Nullable values 和 null checks\"></a>空处理，<code>Nullable values</code> 和 null checks</h3><h3 id=\"类型检查和转换，Cast\"><a href=\"#类型检查和转换，Cast\" class=\"headerlink\" title=\"类型检查和转换，Cast\"></a>类型检查和转换，Cast</h3><h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"Extension拓展\"><a href=\"#Extension拓展\" class=\"headerlink\" title=\"Extension拓展\"></a>Extension拓展</h3><h3 id=\"inline函数\"><a href=\"#inline函数\" class=\"headerlink\" title=\"inline函数\"></a><code>inline</code>函数</h3><h3 id=\"infix函数\"><a href=\"#infix函数\" class=\"headerlink\" title=\"infix函数\"></a><code>infix</code>函数</h3><h3 id=\"data类\"><a href=\"#data类\" class=\"headerlink\" title=\"data类\"></a><code>data</code>类</h3><h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><p><a href=\"https://blog.csdn.net/usagoole/article/details/102680165\" target=\"_blank\" rel=\"noopener\">Kotlin(八)之泛型_协变——逆变——不变</a></p>\n","more":"<h2 id=\"Kotlin基础\"><a href=\"#Kotlin基础\" class=\"headerlink\" title=\"Kotlin基础\"></a>Kotlin基础</h2><blockquote>\n<p><a href=\"https://kotlinlang.org/docs/basic-syntax.html#variables\" target=\"_blank\" rel=\"noopener\">Kotlin_Basics</a></p>\n</blockquote>\n<h3 id=\"类与方法\"><a href=\"#类与方法\" class=\"headerlink\" title=\"类与方法\"></a>类与方法</h3><blockquote>\n<p><a href=\"https://kotlinlang.org/docs/functions.html#default-arguments\" target=\"_blank\" rel=\"noopener\">Kotlin_Functions</a></p>\n<p><a href=\"https://kotlinlang.org/docs/lambdas.html#lambda-expression-syntax\" target=\"_blank\" rel=\"noopener\">Lambda</a></p>\n<p>都是冒号<code>:</code>，继承，变量类型定义，都是冒号，跟在冒号后边</p>\n</blockquote>\n<ul>\n<li><p>定义方法 <code>fun</code> functionName(): <code>T</code>{} </p>\n<blockquote>\n<p>用 <code>:</code>后边跟返回类型，不写默认 Unit ，可以定义泛型</p>\n</blockquote>\n</li>\n<li><p>方法后边可直接跟表达式，返回类型编译器可以自动推断</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">sum</span><span class=\"params\">(n1:<span class=\"type\">Int</span>,n2:<span class=\"type\">Int</span>)</span></span> = n1 + n2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法的形参可以有默认值</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">nice</span><span class=\"params\">(s1:<span class=\"type\">String</span>=<span class=\"string\">\"我\"</span>,s2:<span class=\"type\">String</span>=<span class=\"string\">\"真NB\"</span>)</span></span> = s1 + s2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>方法参数可以使Lambda</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">ok</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       no:<span class=\"type\">Boolean</span>=<span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       yes:()-&gt;<span class=\"type\">Unit</span>=&#123;println(<span class=\"string\">\"oh yeah\"</span>)</span></span>&#125;,</span><br><span class=\"line\">      )=&#123;</span><br><span class=\"line\">    \tyes()</span><br><span class=\"line\">   \tprintln(no)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>参数最后一个lambda可以再调用时候直接写成代码块</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ok(<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// yes lambda block yes代码块</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>此方法最好写成<code>inline</code>函数，某种程度上提升性能</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"判断与循环\"><a href=\"#判断与循环\" class=\"headerlink\" title=\"判断与循环\"></a>判断与循环</h3><h3 id=\"集合，in-when\"><a href=\"#集合，in-when\" class=\"headerlink\" title=\"集合，in,when\"></a>集合，<code>in</code>,<code>when</code></h3><h3 id=\"String模板\"><a href=\"#String模板\" class=\"headerlink\" title=\"String模板\"></a>String模板</h3><h3 id=\"空处理，Nullable-values-和-null-checks\"><a href=\"#空处理，Nullable-values-和-null-checks\" class=\"headerlink\" title=\"空处理，Nullable values 和 null checks\"></a>空处理，<code>Nullable values</code> 和 null checks</h3><h3 id=\"类型检查和转换，Cast\"><a href=\"#类型检查和转换，Cast\" class=\"headerlink\" title=\"类型检查和转换，Cast\"></a>类型检查和转换，Cast</h3><h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"Extension拓展\"><a href=\"#Extension拓展\" class=\"headerlink\" title=\"Extension拓展\"></a>Extension拓展</h3><h3 id=\"inline函数\"><a href=\"#inline函数\" class=\"headerlink\" title=\"inline函数\"></a><code>inline</code>函数</h3><h3 id=\"infix函数\"><a href=\"#infix函数\" class=\"headerlink\" title=\"infix函数\"></a><code>infix</code>函数</h3><h3 id=\"data类\"><a href=\"#data类\" class=\"headerlink\" title=\"data类\"></a><code>data</code>类</h3><h2 id=\"相关资料\"><a href=\"#相关资料\" class=\"headerlink\" title=\"相关资料\"></a>相关资料</h2><p><a href=\"https://blog.csdn.net/usagoole/article/details/102680165\" target=\"_blank\" rel=\"noopener\">Kotlin(八)之泛型_协变——逆变——不变</a></p>\n","categories":[{"name":"Godway","path":"api/categories/Godway.json"},{"name":"Android","path":"api/categories/Android.json"},{"name":"Kotlin","path":"api/categories/Kotlin.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Android","path":"api/tags/Android.json"},{"name":"Kotlin","path":"api/tags/Kotlin.json"},{"name":"技巧","path":"api/tags/技巧.json"},{"name":"Tips","path":"api/tags/Tips.json"}]}